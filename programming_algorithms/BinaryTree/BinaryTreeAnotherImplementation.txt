class Program
    {
        static void Main(string[] args)
        {
            {
                //бинарное дерево
                BinaryTree binaryTree = new BinaryTree(8);
                binaryTree.add(3);
                binaryTree.add(1);
                binaryTree.add(6);
                binaryTree.add(7);
                binaryTree.add(4);
                binaryTree.add(10);
                binaryTree.add(14);
                binaryTree.add(13);
                binaryTree.Remove(8);

                binaryTree.DisplayTree();
                Console.WriteLine();
                Console.WriteLine(binaryTree.Find(binaryTree.start, 8));
                Console.WriteLine(binaryTree.Find(binaryTree.start, 3));
                Console.WriteLine(binaryTree.Find(binaryTree.start, 1));
                Console.WriteLine(binaryTree.Find(binaryTree.start, 6));
                Console.WriteLine(binaryTree.Find(binaryTree.start, 7));
                Console.WriteLine(binaryTree.Find(binaryTree.start, 4));
                Console.WriteLine(binaryTree.Find(binaryTree.start, 10));
                Console.WriteLine(binaryTree.Find(binaryTree.start, 14));
                Console.WriteLine(binaryTree.Find(binaryTree.start, 13));
                Console.WriteLine(binaryTree.Find(binaryTree.start, 20));

            }
        }


        /// <summary>
        /// ¬ершина бинарного дерева
        /// </summary>
        public class node
        {
            public int data { get; set; }
            public node less { get; set; }
            public node bigger { get; set; }
            public node(int number)
            {
                data = number;
            }
        }
        /// <summary>
        /// 
        /// </summary>
        public class BinaryTree
        {
            public node start { get; set; }
            public BinaryTree(int number)
            {
                start = new node(number);
            }
            //добавление
            public void add(int number)
            {
                add(start, number);
            }
            /// <summary>
            /// ƒобавление
            /// Ѕерем ноду если больше значений внутри нее то мы идем вправо если там пуста€ €чейка создаем ноду,
            /// если там зан€то рекурсивно запускаем добавление
            /// с меньше аналогично
            /// </summary>
            /// <param name="node"></param>
            /// <param name="number"></param>
            private void add(node node, int number)
            {
                if (number > node.data)
                {
                    if (node.bigger == null)
                    {
                        node.bigger = new node(number);
                    }
                    else
                    {
                        add(node.bigger, number);
                    }
                }
                else
                {
                    if (node.less == null)
                    {
                        node.less = new node(number);
                    }
                    else
                    {
                        add(node.less, number);
                    }
                }
            }

            public void Remove(int key)
            {
                RemoveHelper(start, key);
            }
            /// <summary>
            /// ”даление ноды из дерева
            /// 
            /// </summary>
            /// <param name="root"></param>
            /// <param name="key"></param>
            /// <returns></returns>
            private node RemoveHelper(node root, int key)
            {

                if (root == null)
                    return root;
                //если ключ меньше корневого узла, идем влево рекурсивно
                if (key < root.data)
                    root.less = RemoveHelper(root.less, key);
                // если ключ больше, чем корневой узел, идем вправо рекурсивно
                else if (key > root.data)
                {
                    root.bigger = RemoveHelper(root.bigger, key);
                }
                //иначе мы нашли ключ
                else
                {
                    //случай 1: удал€емый узел не имеет дочерних элементов
                    if (root.less == null && root.bigger == null)
                    {
                        //просто удал€ем ноду
                        root = null;
                    }
                    //случай 2: удал€емый узел имеет два дочерних элемента
                    else if (root.less != null && root.bigger != null)
                    {
                        var maxNode = FindMin(root.bigger);
                        //скопируйте значение
                        root.data = maxNode.data;
                        root.bigger = RemoveHelper(root.bigger, maxNode.data);
                    }
                    //узел, который нужно удалить, имеет один дочерней элемент
                    else
                    {
                        var child = root.less != null ? root.less : root.bigger;
                        root = child;
                    }

                }
                return root;

            }
            /// <summary>
            /// ѕоиск минимального относительно прин€той ноды
            /// </summary>
            /// <param name="node"></param>
            /// <returns></returns>
            private node FindMin(node node)
            {
                while (node.less != null)
                {
                    node = node.less;
                }
                return node;
            }
            /// <summary>
            /// рекурсивный вывод дерева
            /// идем макс на лево и потом чисто на право
            /// </summary>
            /// <param name="root"></param>
            private void DisplayTree(node root)
            {
                if (root == null) return;

                DisplayTree(root.less);
                System.Console.Write(root.data + " ");
                DisplayTree(root.bigger);
            }

            public void DisplayTree()
            {
                DisplayTree(start);
            }
            /// <summary>
            /// Ќахождение 
            /// ќбход в глубину пока не встретим этот элемент
            /// </summary>
            /// <param name="node">нода</param>
            /// <param name="num">значение ноды</param>
            /// <returns></returns>
            public Boolean Find(node node, int num)
            {
                if (node == null) return false;
                if (node.data == num)
                {
                    return true;
                }
                else if (num < node.data)
                {
                    return Find(node.less, num);
                }
                else if (num > node.data)
                {
                    return Find(node.bigger, num);
                }
                return false;
            }
        }
    }